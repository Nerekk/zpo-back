package com.project.zpo.Tables;

import com.fasterxml.jackson.annotation.JsonIgnore;
import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import java.io.Serializable;
import java.util.List;

/**
 * Entity class representing a student.
 * Each student has a unique album number, first name, last name, belongs to a group, and has a list of attendances.
 * The class implements the Serializable interface to enable object serialization.
 * <p>
 * In database, it is represented as table of fields: [album, firstName, lastName]
 * with relation many-to-one with table groups and one-to-many with table attendances.
 * <p>
 * Constructors, getters and setters are generated by Lombok annotations.
 * @see Group
 * @see Attendance
 */
@Entity
@Table
@AllArgsConstructor
@NoArgsConstructor
@Getter
@Setter
public class Student implements Serializable {

    /**
     * Unique auto-incremented album number of the student.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long album;

    /**
     * Field representing first name of the student.
     * Cannot be null.
     */
    @Column(nullable = false)
    private String firstName;

    /**
     * Field representing last name of the student.
     * Cannot be null.
     */
    @Column(nullable = false)
    private String lastName;

    /**
     * Field representing group to which the student belongs.
     * Relation many students to one group.
     * JPA mapping between an entity field and a column in the database table that stores a foreign key.
     * @see Group
     */
    @ManyToOne
    @JoinColumn(name = "group_id", nullable = false)
    private Group studentGroup;

    /**
     * List of attendances for the student.
     * Relation one student to many attendances.
     * JPA mapping between an entity field and a column in the database table that stores a foreign key.
     * In this case foreign key is also primary key in attendance table.
     * @see Attendance
     */
    @OneToMany(mappedBy = "student", cascade = CascadeType.ALL)
    @PrimaryKeyJoinColumn
    @JsonIgnore
    private List<Attendance> attendances;

    /**
     * Overridden toString method, returning a textual representation of the Student object.
     *
     * @return Textual representation of the Student object.
     */
    @Override
    public String toString() {
        return "Student{" +
                "album=" + album +
                ", firstName='" + firstName + '\'' +
                ", lastName='" + lastName + '\'' +
                ", studentGroup=" + studentGroup +
                ", attendances=" + attendances +
                '}';
    }
}
